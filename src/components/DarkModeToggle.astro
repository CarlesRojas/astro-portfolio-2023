<dark-mode>
  <label class="switch">
    <input id="darkModeCheckbox" type="checkbox" />
    <span class="slider"></span>
  </label>
</dark-mode>

<script>
  class DarkMode extends HTMLElement {
    checkbox: HTMLInputElement | null = null;

    constructor() {
      super();
      this.checkbox = this.querySelector('#darkModeCheckbox');

      if (this.checkbox) {
        this.checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));
      }

      window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', this.handleDarkModeChange.bind(this));
    }

    handleDarkModeChange = (event: MediaQueryListEvent) => {
      if (!this.checkbox) return;
      this.checkbox.checked = event.matches;
      document.documentElement.removeAttribute('data-theme');
    };

    handleCheckboxChange = () => {
      if (!this.checkbox) return;
      document.documentElement.setAttribute('data-theme', this.checkbox.checked ? 'dark' : 'light');
    };
  }

  customElements.define('dark-mode', DarkMode);
</script>

<style lang="scss">
  @import '../styles/shared';

  dark-mode {
    position: relative;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .switch {
    --width-of-switch: 4em;
    --height-of-switch: 2.5em;
    --size-of-icon: 1.7em;
    --slider-offset: 0.4em;
    position: relative;
    width: var(--width-of-switch);
    height: var(--height-of-switch);

    input {
      opacity: 0;
      width: 0;
      height: 0;

      &:checked + .slider {
        @include card(2);
        border-radius: 100vw !important;
      }

      &:checked + .slider:before {
        left: calc(100% - (var(--size-of-icon, 1.4em) + var(--slider-offset, 0.3em)));
        background: transparent;
        box-shadow: inset -3px -2px 5px -2px var(--accent), inset -10px -4px 0 0 var(--accentLow);
      }
    }

    span {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      @include card(2);
      transition: 0.4s;
      border-radius: 100vw !important;

      &:before {
        position: absolute;
        content: '';
        height: var(--size-of-icon, 1.4em);
        width: var(--size-of-icon, 1.4em);
        border-radius: 20px;
        left: var(--slider-offset, 0.3em);
        top: 50%;
        transform: translateY(-50%);
        background: linear-gradient(40deg, var(--complementary), var(--complementaryLow) 70%);
        transition: 0.4s;
      }
    }
  }
</style>

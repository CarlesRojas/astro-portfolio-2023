---
import type { Project } from '@src/constants';

import LeftArrowIcon from '@assets/icons/arrow-left-line.svg';
import RightArrowIcon from '@assets/icons/arrow-right-line.svg';

export interface Props {
  project: Project;
}

interface Media {
  src: string;
  type: 'image' | 'video';
}

const { project } = Astro.props;

const { video, videoPosition, numberOfScreenshots } = project;

const imageRoutes = Array.from({ length: numberOfScreenshots }, (_, i) => i + 1).map(
  (i) =>
    ({
      src: `/assets/${project.route}/screenshot${i}.jpg`,
      type: 'image',
    } as Media),
);

if (video) imageRoutes.splice(videoPosition, 0, { src: `/assets/${project.route}/video.mp4`, type: 'video' } as Media);
---

<image-gallery>
  <div id="container">
    <div class="imagesContainer">
      {
        imageRoutes.map(({ src, type }, i) =>
          type === 'image' ? (
            <img
              id={`media${i}`}
              class={i === 0 ? 'interactible firstElemVisible' : ''}
              src={src}
              alt="project image"
            />
          ) : (
            <video
              id={`media${i}`}
              class={i === 0 ? 'interactible firstElemVisible' : ''}
              src={src}
              controls
              autoplay
              muted
            />
          ),
        )
      }
    </div>

    <footer>
      <button type="button" id="leftArrow"><img src={LeftArrowIcon} alt="Left Arrow Icon" /></button>
      <div>
        <p id="current">1</p>
        <p class="low">{`/ ${numberOfScreenshots + (video ? 1 : 0)}`}</p>
      </div>
      <button type="button" id="rightArrow"><img src={RightArrowIcon} alt="Right Arrow Icon" /></button>
    </footer>
  </div>
</image-gallery>

<script>
  class ImageGallery extends HTMLElement {
    currentImageNumber = 0;
    currentImageContainer: Element | null = null;
    images: Element[] = [];

    constructor() {
      super();

      const prevButton = this.querySelector('#leftArrow');
      const nextButton = this.querySelector('#rightArrow');
      this.currentImageContainer = this.querySelector('#current');

      while (true) {
        const newMedia = this.querySelector(`#media${this.images.length}`);
        if (!newMedia) break;
        this.images.push(newMedia);
      }

      if (prevButton) prevButton.addEventListener('click', this.handleViewPrevious.bind(this));
      if (nextButton) nextButton.addEventListener('click', this.handleViewNext.bind(this));
    }

    removeAllAnimationClasses = (image: Element) => {
      image.classList.remove('enterFromLeft');
      image.classList.remove('enterFromRight');
      image.classList.remove('leaveToLeft');
      image.classList.remove('leaveToRight');
      image.classList.remove('firstElemVisible');
    };

    handleViewPrevious = () => {
      const prevVisibleMedia = this.currentImageNumber;
      this.currentImageNumber -= 1;
      if (this.currentImageNumber < 0) this.currentImageNumber = this.images.length - 1;

      this.images[prevVisibleMedia].classList.remove('interactible');
      this.images[this.currentImageNumber].classList.add('interactible');

      this.removeAllAnimationClasses(this.images[prevVisibleMedia]);
      this.removeAllAnimationClasses(this.images[this.currentImageNumber]);

      this.images[prevVisibleMedia].classList.add('leaveToRight');
      this.images[this.currentImageNumber].classList.add('enterFromLeft');

      if (this.currentImageContainer) this.currentImageContainer.textContent = `${this.currentImageNumber + 1}`;
    };

    handleViewNext = () => {
      const prevVisibleMedia = this.currentImageNumber;
      this.currentImageNumber += 1;
      if (this.currentImageNumber >= this.images.length) this.currentImageNumber = 0;

      this.images[prevVisibleMedia].classList.remove('interactible');
      this.images[this.currentImageNumber].classList.add('interactible');

      this.removeAllAnimationClasses(this.images[prevVisibleMedia]);
      this.removeAllAnimationClasses(this.images[this.currentImageNumber]);

      this.images[prevVisibleMedia].classList.add('leaveToLeft');
      this.images[this.currentImageNumber].classList.add('enterFromRight');

      if (this.currentImageContainer) this.currentImageContainer.textContent = `${this.currentImageNumber + 1}`;
    };
  }

  customElements.define('image-gallery', ImageGallery);
</script>

<style lang="scss">
  @import '../styles/mixins.scss';
  @import '../styles/shared.scss';

  #container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    gap: 2rem;
    overflow: visible;

    .imagesContainer {
      position: relative;
      width: 100%;
      flex-grow: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 60vh;
      pointer-events: none;

      @include landscape {
        flex-grow: 1;
        height: unset;
      }

      img,
      video {
        @include card(1);
        position: absolute;
        object-fit: contain;
        width: auto;
        max-width: 100%;
        height: auto;
        max-height: 100%;
        pointer-events: none;
        user-select: none;
        pointer-events: all;
        opacity: 0;
        pointer-events: none;

        &.interactible {
          pointer-events: all;
        }

        &.firstElemVisible {
          opacity: 1;
        }

        &.enterFromLeft {
          animation: enterFromLeft var(--animation-duration) ease-in-out; // TODO change to the animation speed variable
          animation-fill-mode: forwards;
          animation-delay: calc(var(--animation-duration) * 1);
        }

        &.enterFromRight {
          animation: enterFromRight var(--animation-duration) ease-in-out;
          animation-fill-mode: forwards;
          animation-delay: calc(var(--animation-duration) * 1);
        }

        &.leaveToLeft {
          animation: leaveToLeft var(--animation-duration) ease-in-out;
          animation-fill-mode: forwards;
        }

        &.leaveToRight {
          animation: leaveToRight var(--animation-duration) ease-in-out;
          animation-fill-mode: forwards;
        }

        @keyframes enterFromLeft {
          0% {
            transform: translateX(-3rem);
            opacity: 0;
          }
          50% {
            opacity: 1;
          }
          100% {
            transform: translateX(0);
            opacity: 1;
          }
        }

        @keyframes enterFromRight {
          0% {
            transform: translateX(3rem);
            opacity: 0;
          }
          50% {
            opacity: 1;
          }
          100% {
            transform: translateX(0);
            opacity: 1;
          }
        }

        @keyframes leaveToLeft {
          0% {
            transform: translateX(0);
            opacity: 1;
          }
          50% {
            opacity: 1;
          }
          100% {
            transform: translateX(-3rem);
            opacity: 0;
          }
        }

        @keyframes leaveToRight {
          0% {
            transform: translateX(0);
            opacity: 1;
          }
          50% {
            opacity: 1;
          }
          100% {
            transform: translateX(3rem);
            opacity: 0;
          }
        }
      }
    }

    footer {
      position: relative;
      width: 100%;
      height: fit-content;
      min-height: fit-content;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 2rem;

      div {
        display: flex;
        gap: 0.25rem;
        text-align: center;

        p {
          @include text;

          &.low {
            @include text-low;
          }
        }
      }

      button {
        @include card(2);
        padding: 0.5rem;
        width: 2.5rem;
        height: 2.5rem;

        @include mouse {
          cursor: pointer;

          &:hover {
            transform: scale(1.1);
          }
        }

        img {
          filter: invert(1);

          @include light {
            filter: invert(0);
          }

          @include dark {
            filter: invert(1);
          }
        }
      }
    }
  }
</style>

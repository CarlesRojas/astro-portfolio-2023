---
import LeftArrowIcon from '@assets/icons/arrow-left-line.svg';
import RightArrowIcon from '@assets/icons/arrow-right-line.svg';
import type { Project } from '@src/constants';
import ProjectCard from './ProjectCard.astro';

export interface Props {
  title: string;
  projects: Project[];
}

const { title, projects } = Astro.props as Props;
---

<div class="section">
  <h1>{title}</h1>

  <div class="slider">
    <horizontal-scroll>
      <div id="scroll" class="scrollContainer">
        <ul>
          {
            projects.map(({ route, title }, i) => (
              <li id="project" style={{ '--index': i }}>
                <ProjectCard route={route} title={title} />
              </li>
            ))
          }
        </ul>
      </div>

      <div id="buttons" class="scrollButtons">
        <button id="prevButton">
          <img src={LeftArrowIcon} alt="Left Arrow Icon" />
        </button>

        <button id="nextButton">
          <img src={RightArrowIcon} alt="Right Arrow Icon" />
        </button>
      </div>
    </horizontal-scroll>
  </div>

  <script>
    import { DESKTOP_THRESHOLD, TABLET_THRESHOLD } from '@src/constants';
    import debounce from 'debounce';

    class WheelHorizontalScroll extends HTMLElement {
      scrollContainer: HTMLElement | null = null;
      nextButton: HTMLElement | null = null;
      prevButton: HTMLElement | null = null;
      buttonsContainer: HTMLElement | null = null;
      elements: HTMLElement[] = [];
      visibleElements: boolean[] = [];
      firstVisible: number = 0;
      lastVisible: number = 0;
      maxVisible: number = 1;
      observer: IntersectionObserver | null = null;

      constructor() {
        super();

        window.onresize = debounce(this.handleResize.bind(this), 500);

        this.scrollContainer = this.querySelector('#scroll');
        this.nextButton = this.querySelector('#nextButton');
        this.prevButton = this.querySelector('#prevButton');
        this.buttonsContainer = this.querySelector('#buttons');
        this.elements = Array.from(this.querySelectorAll('#project'));

        this.visibleElements = new Array(this.elements.length).fill(false);

        if (this.nextButton) this.nextButton.addEventListener('click', () => this.handleScrollButtonClicked(true));
        if (this.prevButton) this.prevButton.addEventListener('click', () => this.handleScrollButtonClicked(false));

        if (this.scrollContainer) {
          this.scrollContainer.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });

          this.observer = new IntersectionObserver(this.handleImageVisible.bind(this), {
            root: this.scrollContainer,
            threshold: 1,
          });

          this.elements.forEach((element) => {
            if (element) this.observer?.observe(element);
          });
        }
      }

      handleResize = () => {
        this.maxVisible = -1;
        this.handleImageVisible([]);
      };

      handleWheel = (event: WheelEvent) => {
        const width = window.innerWidth;
        const height = window.innerHeight;
        const lateralHero = width > height && width >= DESKTOP_THRESHOLD;

        if (lateralHero && this.scrollContainer) {
          event.preventDefault();
          this.scrollContainer.scrollLeft += event.deltaY;
        }
      };

      getPadding = () => {
        const width = window.innerWidth;
        return width < TABLET_THRESHOLD ? 16 : 16 * 3;
      };

      handleScrollButtonClicked = (showNext: boolean) => {
        const newFirstIndex = showNext
          ? Math.min(this.elements.length - 1, this.lastVisible + 1)
          : Math.max(0, this.firstVisible - this.maxVisible);

        const newFirstProject = this.elements[newFirstIndex];

        if (newFirstProject) {
          const padding = this.getPadding();
          const position = newFirstProject.offsetLeft - padding;
          this.scrollContainer?.scrollTo({ left: position, behavior: 'smooth' });
        }
      };

      getElementIndex = (element: Element) => {
        let i = 0;
        let current: Element | null = element;
        for (i = 0; current; i++) current = current.previousElementSibling;
        return i - 1;
      };

      handleImageVisible = (entries: IntersectionObserverEntry[]) => {
        entries.forEach((entry) => {
          const index = this.getElementIndex(entry.target);
          this.visibleElements[index] = entry.isIntersecting;
        });

        this.maxVisible = Math.max(this.maxVisible, this.visibleElements.filter((e) => e).length);
        this.firstVisible = this.visibleElements.indexOf(true);
        this.lastVisible = this.visibleElements.lastIndexOf(true);
        const allVisible = this.visibleElements.reduce((a, b) => a && b, true);

        this.nextButton?.classList.toggle('disable', this.lastVisible >= this.elements.length - 1);
        this.prevButton?.classList.toggle('disable', this.firstVisible <= 0);
        this.buttonsContainer?.classList.toggle('hidden', allVisible);
      };
    }

    customElements.define('horizontal-scroll', WheelHorizontalScroll);
  </script>

  <style lang="scss">
    @import '../styles/shared';

    .section {
      --paddingTop: 0.5rem;

      @include tablet {
        --paddingTop: 0.75rem;
      }

      h1 {
        @include header-medium;
        padding-left: var(--spacing);
      }

      .slider {
        position: relative;
        width: 100%;
        height: fit-content;

        .scrollButtons {
          display: none;
          position: absolute;
          left: 0;
          right: 0;
          bottom: 0;
          top: 0;
          justify-content: space-between;
          padding: var(--paddingTop) 0 var(--spacing);
          pointer-events: none;

          &.hidden {
            display: none !important;
          }

          @include mouse {
            display: flex;
          }

          button {
            position: relative;
            height: 100%;
            width: var(--spacing);
            background-color: rgba(0, 0, 0, 0.2);
            pointer-events: all;
            display: flex;
            align-items: center;
            justify-content: center;

            &.disable {
              pointer-events: none !important;
              opacity: 0 !important;
            }

            @include mouse {
              opacity: 1;

              @include landscape {
                @include desktop {
                  opacity: 0;
                }
              }

              &:hover {
                opacity: 1;
                background-color: rgba(0, 0, 0, 0.3);

                @include light {
                  background-color: rgba(0, 0, 0, 0.1);
                }

                @include dark {
                  background-color: rgba(0, 0, 0, 0.3);
                }
              }
            }

            img {
              width: 50%;
              height: 100%;
              pointer-events: none;
              filter: invert(1);

              @include light {
                filter: invert(0);
              }

              @include dark {
                filter: invert(1);
              }
            }
          }
        }

        .scrollContainer {
          position: relative;
          overflow-y: hidden;
          overflow-x: auto;

          ul {
            width: fit-content;
            display: flex;
            gap: 1rem;
            overflow: visible;
            padding: var(--paddingTop) var(--spacing) calc(var(--spacing) * 2);

            @include tablet {
              padding: var(--paddingTop) var(--spacing) var(--spacing);
              gap: 1.5rem;
            }

            @include desktop {
              padding: var(--paddingTop) var(--spacing) var(--spacing);
            }

            li {
              overflow: visible;
              animation: moveIn calc(var(--animation-duration) * 0.75) ease-in-out;
              animation-delay: calc(
                calc(var(--animation-duration) * 0.75) + calc(calc(var(--animation-duration) * 0.5) * var(--index))
              );
              animation-fill-mode: forwards;
              opacity: 0;
              translate: 0 1rem;

              @keyframes moveIn {
                0% {
                  opacity: 0;
                  translate: 0 1rem;
                }
                100% {
                  opacity: 1;
                  translate: 0 0rem;
                }
              }
            }
          }
        }
      }
    }
  </style>
</div>
